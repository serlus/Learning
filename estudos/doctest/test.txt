Now we're going to take some more of doctest's syntax for a spin.

>>> import sys
>>> def test_write():
...     sys.stdout.write("Hello\n")
...     return True
>>> test_write()
Hello
True

In this exemple we add three test to the file. 
=>import
    > the first on says that when we import sys, nothing visible should happen.
=>def function
    > the second test says that when we difine the test_write function, 
    nothing visible happen.
=>call function
    > the third test says that when we call the test_write function, Hello and True
    should appear on the console, in that order, on separate lines. 


Here we use doctest's exception syntax to check that Python is correctly enforcing its grammar. 

>>> def faulty():
...     yield 5
...     return 7
Traceback (most recent call last):
SyntaxError: 'return' with argument inside generator
(<doctest test.txt[5]>, line 3)


Next up, we're exploring the ellipsis.

>>> sys.modules # doctest: +ELLIPSIS 
{...'sys': <module 'sys' (built-in)>...}
>>> 'This is an expression that evaluates to a string'
... # doctest: +ELLIPSIS
'This is ... a string'
>>> 'This is also a string' # doctest: +ELLIPSIS
'This is ... a string'
>>> import datetime
>>> datetime.datetime.now().isoformat() # doctest: +ELLIPSIS
'...-...-...T...:...:...'

Normalize
>>> sys.stdout.write("This text\n contains weird    spacing.")
... #doctest: +NORMALIZE_WHITESPACE
This text contains weird spacing.


Skipping

Now we're telling doctest to skip a test
>>> 'This test would fail.' # doctest: +SKIP 
If it were allowed to run.


more directives
http://docs.python.org/library/doctest.html#option-flags-and-directives

+DONT_ACCEPT_TRUE_FOR_1
+DONT_ACCEPT_BLANKLINE
+IGNORE_EXCEPTION_DETAIL
+REPORT_UDIFF
+REPORT_CDIFF
+REPORT_NDIFF
+REPORT_ONLY_FIRST_FAILURE

>>> def test1():
...     import frob
...     return frob.hash('qux')
>>> test1()
77